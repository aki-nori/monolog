/ ユーザ情報を表示するサイドバー
.card.text-white.bg-primary
  .card-header.font-bold
    %i.fas.fa-user.m-0 ユーザー情報
  .card-body
    %table
      %tr
        %td
          = attachment_image_tag user, :profile_image, fallback: "noimage.jpg", :class => "rounded-circle user-card-user-image"
        %td
          %h6.card-title.ml-2.link-font-light
            = link_to user.name, user_path(user)
          .ml-2
            %div{:id => "follow-#{user.id}"}
              = render 'relationships/follow', user: user, info_user: info_user
    %p.card-text.user-card-user-intro= user.introduction
    .float-right.link-font-light
      - unless user.twitter_account.blank?
        = link_to user.twitter_account.to_s ,target: :_blank do
          %i.fab.fa-twitter.mr-1
      - unless user.instagram_account.blank?
        = link_to user.instagram_account.to_s ,target: :_blank do
          %i.fab.fa-instagram.mr-1
      - unless user.facebook_account.blank?
        = link_to user.facebook_account.to_s ,target: :_blank do
          %i.fab.fa-facebook-square
  .card-body.text-center
    %div{:id => "counter-#{user.id}"}
      = render 'users/counter', user: info_user
    .text-right.text-muted{:style => "font-size: 6px;"}
      - unless user.address == nil
        #map{:style => "height: 200px;"}
        %i.fas.fa-map-marker-alt
      = " #{user.address}"
      %br/
      = "#{user.created_at.strftime("%Y年%m月%d日")}に登録"
  - if user == current_user
    %ul.list-group.list-group-flush.link-font-light.text-center
      %li.list-group-item.bg-primary
        = link_to like_item_path(user) do
          %i.fas.fa-thumbs-up
            いいねしたガジェット
            %span.badge.badge-light.badge-pill= "#{user.liked_items.count}"
      %li.list-group-item.bg-primary
        = link_to edit_user_path(current_user) do
          %i.fas.fa-user-edit プロフィール編集
      %li.list-group-item.bg-primary
        %h6
          = link_to edit_user_registration_path do
            %i.fas.fa-key パスワード変更
      %li.list-group-item.bg-primary
        = link_to destroy_user_session_path, method: :delete, :class => "nav-link" do
          %i.fas.fa-sign-out-alt ログアウト

:javascript
    function initMap(){
      var geocoder = new google.maps.Geocoder();
      var inputAddress = '#{user.address}';

      geocoder.geocode( { 'address': inputAddress}, function(results, status) {
        if (status == 'OK') {
          var map = new google.maps.Map(document.getElementById('map'),{
            zoom: 6,
            mapTypeId: 'terrain',
            mapTypeControl: false,
            zoomControl: false,
            fullscreenControl: false,
            streetViewControl: false,
            center: results[0].geometry.location
          });
          var marker = new google.maps.Marker({
            map: map,
            position: results[0].geometry.location
          });
        } else {
          document.getElementById("map").style.display ="none";
        }
      });
    }

%script{:async => "", :defer => "defer", :src => "https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_API_KEY']}=initMap"}
